# Demo of a table that stores website content accessed via GraphQL.
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: AppSync and DynamoDB demo.

Resources:
  DemoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub appsync-demo-${AWS::Region}
      AttributeDefinitions:
        - AttributeName: itemId
          AttributeType: S
        - AttributeName: created
          AttributeType: S
      KeySchema:
        - AttributeName: itemId
          KeyType: HASH
        - AttributeName: created
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  DynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
      Policies:
        - PolicyName: DynamoAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt DemoTable.Arn

  AppSyncApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: DemoApi
      XrayEnabled: true
      AuthenticationType: API_KEY

  AppSyncApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId

  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Definition: |
        type Item {
          itemId: ID!
          title: String
          created: String
        }
        type PaginatedItems {
          items: [Item!]!
          nextToken: String
        }
        type Query {
          allItems(limit: Int, nextToken: String): PaginatedItems!
          getItem(itemId: ID!): Item
        }
        type Mutation {
          saveItem(itemId: ID!, title: String!, created: String!): Item
          deleteItem(itemId: ID!): Item
        }
        type Schema {
          query: Query
          mutation: Mutation
        }

  AppSyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: DemoDataSource
      ApiId: !GetAtt AppSyncApi.ApiId
      Description: 'Demo table data source'
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt DynamoDBRole.Arn
      DynamoDBConfig:
        TableName: !Ref DemoTable
        AwsRegion: !Sub ${AWS::Region}

  AppSyncAllItemsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: allItems
      DataSourceName: !GetAtt AppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Scan",
          "limit": $util.defaultIfNull(${ctx.args.limit},20),
          "nextToken": $util.toJson(${ctx.args.nextToken})
        }
      ResponseMappingTemplate: |
        {
          "items": $util.toJson($ctx.result.items),
          "nextToken": $util.toJson(${ctx.args.nextToken})
        }

  AppSyncGetItemResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getItem
      DataSourceName: !GetAtt AppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "GetItem",
          "key": {
            "itemId": $util.dynamodb.toDynamoDBJson($ctx.args.itemId)
          }
        }
      ResponseMappingTemplate: '$util.toJson($ctx.result)'

  AppSyncUpdateItemResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: saveItem
      DataSourceName: !GetAtt AppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "itemId": $util.dynamodb.toDynamoDBJson($ctx.args.itemId)
          },
          "attributeValues": {
            "title": $util.dynamodb.toDynamoDBJson($ctx.args.title),
            "created": $util.dynamodb.toDynamoDBJson($ctx.args.created)
          }
        }
      ResponseMappingTemplate: '$util.toJson($ctx.result)'

  AppSyncDeleteItemResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: deleteItem
      DataSourceName: !GetAtt AppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "DeleteItem",
          "key": {
            "itemId": $util.dynamodb.toDynamoDBJson($ctx.args.itemId)
          }
        }
      ResponseMappingTemplate: '$util.toJson($ctx.result)'

Outputs:
  GraphQLApiEndpoint:
    Description: URL for GraphQL endpoint.
    Value: !GetAtt AppSyncApi.GraphQLUrl
  APIKey:
    Description: API Key endpoint (header key name 'x-api-key').
    Value: !GetAtt AppSyncApiKey.ApiKey
